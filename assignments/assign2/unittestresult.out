Testing endTurn(): 
  Testing turn changed: 
    PASSED
  Testing player 0 has empty hand and player 1 has full hand: 
    PASSED

Testing isGameOver(): 
  Testing no end state: 
    PASSED
  Testing no province pile empty: 
    PASSED
  Testing 3 supply piles empty: 
    PASSED

Testing drawCard(): 
  Testing deck smaller: 
    PASSED
  Testing hand bigger: 
    PASSED

Testing discardCard(): 
  Testing discard count: 
    PASSED

Testing adventurerCard: 
  Testing added 2 treasures: 
    PASSED
  Testing proper cards discarded: 
    FAILED

Testing feast: 
  Testing buy cheaper card: 
    PASSED
  Testing buy expensive card: 
    That card is too expensive!
    PASSED

Testing village: 
  Testing gain 2 actions: 
    PASSED
  Testing hand has same number: 
    PASSED

Testing steward: 
  Testing gain cards choice: 
    PASSED
  Testing coin choice: 
    PASSED
  Testing discard choice: 
    PASSED
  Testing card played: 
    PASSED

File 'dominion.c'
Lines executed:34.26% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       88:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
       16:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      488:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       10:  346:int whoseTurn(struct gameState *state) {
       10:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        1:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
        6:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        6:  380:  for (k = 0; k < 5; k++){
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       52:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       52:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       52:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
       52:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       52:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       52:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       52:  576:    state->deckCount[player]--;
       52:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       52:  580:  return 0;
        -:  581:}
        -:  582:
        2:  583:int getCost(int cardNumber)
        -:  584:{
        2:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:int adventurerFunc(struct gameState *state, int currentPlayer, int * temphand, int drawntreasure, int z) {
        -:  647:	int cardDrawn;
        5:  648:	for (; drawntreasure <= 2;) {
        3:  649:		if (*(currentPlayer + (*state).deckCount) < 1) //if the deck is empty we need to shuffle discard and add to deck
    #####:  650:			shuffle(currentPlayer, state);
        3:  651:		drawCard(currentPlayer, state);
        3:  652:		cardDrawn = *(*(currentPlayer + (*state).hand) + *(currentPlayer + (*state).handCount) - 1); //top card of hand is most recently drawn card.
        6:  653:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3:  654:			++drawntreasure;
        -:  655:		else {
    #####:  656:			*(z + temphand) = cardDrawn;
    #####:  657:			--*((*state).handCount + currentPlayer); //this should just remove the top card (the most recently drawn one).
    #####:  658:			++z;
        -:  659:		}
        -:  660:	}
        2:  661:	for (; z - 1 > 0;) {
    #####:  662:		*(*(currentPlayer + (*state).discard) + *(currentPlayer + (*state).discardCount) + 1) = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		--z;
        -:  664:	}
        1:  665:	return 0;
        -:  666:}
        -:  667:
        2:  668:int feastFunc(struct gameState *state, int currentPlayer, int * temphand, int choice1) {
        2:  669:	int i = 0;
        -:  670:	int x;
        -:  671:	//gain card with cost up to 5
        -:  672:	//Backup hand 
       14:  673:	for (i == 0; i <= *((*state).handCount + currentPlayer); i++) {
       12:  674:		temphand[i] = *(*((*state).hand + currentPlayer) + i);//Backup card
       12:  675:		*(*((*state).hand + currentPlayer) + i) = -1;//Set to nothing
        -:  676:	}
        -:  677:	//Backup hand
        -:  678:
        -:  679:	//Update Coins for Buy
        2:  680:	updateCoins(currentPlayer, state, 5);
        2:  681:	x = 1;//Condition to loop on
        -:  682:	//while (x == 1) {//Buy one card
        2:  683:		if (supplyCount(choice1, state) <= 0) {
    #####:  684:			if (DEBUG)
        -:  685:				printf("None of that card left, sorry!\n");
        -:  686:
    #####:  687:			if (DEBUG)
        -:  688:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:		}
        2:  690:		else if (state->coins < getCost(choice1)) {
        1:  691:			printf("That card is too expensive!\n");
        -:  692:
        1:  693:			if (DEBUG)
        -:  694:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  695:		}
        -:  696:		else {
        1:  697:			if (DEBUG)
        -:  698:				printf("Deck Count: %d\n", *((*state).handCount + currentPlayer) + *((*state).deckCount + currentPlayer) + *((*state).discardCount + currentPlayer));
        -:  699:
        1:  700:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  701:			x = 0;//No more buying cards
        -:  702:
        1:  703:			if (DEBUG)
        -:  704:				printf("Deck Count: %d\n", *((*state).handCount + currentPlayer) + *((*state).deckCount + currentPlayer) + *((*state).discardCount + currentPlayer));
        -:  705:
        -:  706:		}
        -:  707://	}
        -:  708:
        -:  709:	//Reset Hand
       12:  710:	for (i = 0; i < *((*state).handCount + currentPlayer); i++) {
       10:  711:		*(*((*state).hand + currentPlayer) + i) = *(i + temphand);
       10:  712:		*( i + temphand) = -1;
        -:  713:	}
        -:  714:	//Reset Hand
        -:  715:
        2:  716:	return x;
        -:  717:}
        -:  718:
    #####:  719:int baronFunc(struct gameState *state, int currentPlayer, int choice1) {
    #####:  720:	++(*state).numBuys;//Increase buys by 1!
    #####:  721:	if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  722:		int p = 0;//Iterator for hand!
    #####:  723:		int card_not_discarded = 1;//Flag for discard set!
    #####:  724:		while (card_not_discarded)
    #####:  725:			if (*(p + (*state).hand + currentPlayer)) {//Found an estate card!
    #####:  726:				(*state).coins += 4;//Add 4 coins to the amount of coins
    #####:  727:				*(*(currentPlayer + (*state).discard) + *((*state).discardCount + currentPlayer)) = *(p + *((*state).hand + currentPlayer));
    #####:  728:				++*(currentPlayer + (*state).discardCount);
    #####:  729:				for (; p < *(currentPlayer + (*state).handCount); p++)
    #####:  730:					*(*((*state).hand + currentPlayer) + p) = *(*((*state).hand + currentPlayer) + p + 1);
    #####:  731:				*(*(currentPlayer + (*state).handCount) + *((*state).hand + currentPlayer)) = -1;
    #####:  732:				--*(currentPlayer + (*state).handCount);
    #####:  733:				card_not_discarded = 0;//Exit the loop
        -:  734:			}
    #####:  735:			else if (p > *(currentPlayer + (*state).handCount)) {
    #####:  736:				if (DEBUG) {
        -:  737:					printf("No estate cards in your hand, invalid choice\n");
        -:  738:					printf("Must gain an estate if there are any\n");
        -:  739:				}
    #####:  740:				if (supplyCount(estate, state) > 0) {
    #####:  741:					gainCard(estate, state, 0, currentPlayer);
    #####:  742:					--*(estate + (*state).supplyCount - 1);//Decrement estates
    #####:  743:					if (!supplyCount(estate, state)) {
    #####:  744:						isGameOver(state);
        -:  745:					}
        -:  746:				}
    #####:  747:				card_not_discarded = 0;//Exit the loop
        -:  748:			}
        -:  749:
        -:  750:			else
    #####:  751:				p++;//Next card
        -:  752:	}
        -:  753:	else {
    #####:  754:		if (supplyCount(estate, state) > 0) {
    #####:  755:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  756:			--*(estate + (*state).supplyCount - 1);//Decrement Estates
    #####:  757:			if (!supplyCount(estate, state))
    #####:  758:				isGameOver(state);
        -:  759:		}
        -:  760:	}
    #####:  761:	return 0;
        -:  762:}
        -:  763:
    #####:  764:int minionFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
        -:  765:	int i, j;
        -:  766:	//+1 action
    #####:  767:	++(*state).numActions;
        -:  768:
        -:  769:	//discard card from hand
    #####:  770:	discardCard(handPos, currentPlayer, state, 0);
        -:  771:
    #####:  772:	if (choice1)		//+2 coins
    #####:  773:		(*state).coins = *(&(*state).coins + 2);
        -:  774:
    #####:  775:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  776:	{
        -:  777:		//discard hand
    #####:  778:		while (numHandCards(state) > 0)
    #####:  779:			discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:		//draw 4
    #####:  782:		for (i = 0; i < 4; i++)
    #####:  783:			drawCard(currentPlayer, state);
        -:  784:
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < (*state).numPlayers; i++)
    #####:  787:			if (i != currentPlayer)
    #####:  788:				if (*((*state).handCount + i) > 4)
        -:  789:				{
        -:  790:					//discard hand
    #####:  791:					while (*((*state).handCount + i) > 0)
    #####:  792:						discardCard(handPos, i, state, 0);
        -:  793:
        -:  794:					//draw 4
    #####:  795:					for (j = 0; j < 4; j++)
    #####:  796:						drawCard(i, state);
        -:  797:				}
        -:  798:	}
    #####:  799:	return 0;
        -:  800:}
        -:  801:
    #####:  802:int ambassadorFunc(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos ) {
    #####:  803:	int j = 0;		//used to check if player has enough cards to discard
        -:  804:	int i;
        -:  805:
    #####:  806:	if (choice2 > 2 | choice2 < 0)
    #####:  807:		return -1;
        -:  808:
    #####:  809:	if (choice1 == handPos)
    #####:  810:		return -1;
        -:  811:
    #####:  812:	for (i = 0; i < *((*state).handCount + currentPlayer); i++)
    #####:  813:		if (i != handPos && i == *(*((*state).hand + currentPlayer) + choice1) && i != choice1)
    #####:  814:			j++;
    #####:  815:	if (j < choice2)
    #####:  816:		return -1;
        -:  817:
    #####:  818:	if (DEBUG)
        -:  819:		printf("Player %d reveals card number: %d\n", currentPlayer, *(*((*state).hand + currentPlayer) + choice1));
        -:  820:
        -:  821:	//increase supply count for choosen card by amount being discarded
    #####:  822:	*((*state).supplyCount + *(*((*state).hand + currentPlayer) + choice1)) += choice2;
        -:  823:
        -:  824:	//each other player gains a copy of revealed card
    #####:  825:	for (i = 0; i < state->numPlayers; i++)
    #####:  826:		if (i != currentPlayer)
    #####:  827:			gainCard(*(*((*state).hand + currentPlayer) + choice1), state, 0, i);
        -:  828:
        -:  829:	//discard played card from hand
    #####:  830:	discardCard(handPos, currentPlayer, state, 0);
        -:  831:
        -:  832:	//trash copies of cards returned to supply
    #####:  833:	for (j = 0; j < choice2; j++)
    #####:  834:		for (i = 0; i < *((*state).handCount + currentPlayer); i++)
    #####:  835:			if (*(*((*state).hand + currentPlayer) + i) == *(*((*state).hand + currentPlayer) + choice1))
        -:  836:			{
    #####:  837:				discardCard(i, currentPlayer, state, 1);
    #####:  838:				break;
        -:  839:			}
    #####:  840:	return 0;
        -:  841:}
        -:  842:
        7:  843:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  844:{
        -:  845:  int i;
        -:  846:  int j;
        -:  847:  int k;
        -:  848:  int x;
        -:  849:  int index;
        7:  850:  int currentPlayer = whoseTurn(state);
        7:  851:  int nextPlayer = currentPlayer + 1;
        -:  852:
        7:  853:  int tributeRevealedCards[2] = {-1, -1};
        -:  854:  int temphand[MAX_HAND];// moved above the if statement
        7:  855:  int drawntreasure=0;
        -:  856:  int cardDrawn;
        7:  857:  int z = 0;// this is the counter for the temp hand
        7:  858:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  859:    nextPlayer = 0;
        -:  860:  }
        -:  861:  
        -:  862:	
        -:  863:  //uses switch to select card and perform actions
        7:  864:  switch( card ) 
        -:  865:    {
        -:  866:    case adventurer:
        1:  867:		return adventurerFunc(state, currentPlayer, temphand, drawntreasure, z);
        -:  868:			
        -:  869:    case council_room:
        -:  870:      //+4 Cards
    #####:  871:      for (i = 0; i < 4; i++)
        -:  872:	{
    #####:  873:	  drawCard(currentPlayer, state);
        -:  874:	}
        -:  875:			
        -:  876:      //+1 Buy
    #####:  877:      state->numBuys++;
        -:  878:			
        -:  879:      //Each other player draws a card
    #####:  880:      for (i = 0; i < state->numPlayers; i++)
        -:  881:	{
    #####:  882:	  if ( i != currentPlayer )
        -:  883:	    {
    #####:  884:	      drawCard(i, state);
        -:  885:	    }
        -:  886:	}
        -:  887:			
        -:  888:      //put played card in played card pile
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case feast:
        2:  894:	  return feastFunc(state, currentPlayer, temphand, choice1);
        -:  895:			
        -:  896:    case gardens:
    #####:  897:      return -1;
        -:  898:			
        -:  899:    case mine:
    #####:  900:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  901:
    #####:  902:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:		
    #####:  907:      if (choice2 > treasure_map || choice2 < curse)
        -:  908:	{
    #####:  909:	  return -1;
        -:  910:	}
        -:  911:
    #####:  912:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  913:	{
    #####:  914:	  return -1;
        -:  915:	}
        -:  916:
    #####:  917:      gainCard(choice2, state, 2, currentPlayer);
        -:  918:
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:
        -:  922:      //discard trashed card
    #####:  923:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  924:	{
    #####:  925:	  if (state->hand[currentPlayer][i] == j)
        -:  926:	    {
    #####:  927:	      discardCard(i, currentPlayer, state, 0);			
    #####:  928:	      break;
        -:  929:	    }
        -:  930:	}
        -:  931:			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case remodel:
    #####:  935:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  936:
    #####:  937:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  938:	{
    #####:  939:	  return -1;
        -:  940:	}
        -:  941:
    #####:  942:      gainCard(choice2, state, 0, currentPlayer);
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
        -:  946:
        -:  947:      //discard trashed card
    #####:  948:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  949:	{
    #####:  950:	  if (state->hand[currentPlayer][i] == j)
        -:  951:	    {
    #####:  952:	      discardCard(i, currentPlayer, state, 0);			
    #####:  953:	      break;
        -:  954:	    }
        -:  955:	}
        -:  956:
        -:  957:
    #####:  958:      return 0;
        -:  959:		
        -:  960:    case smithy:
        -:  961:      //+3 Cards
    #####:  962:      for (i = 0; i < 3; i++)
        -:  963:	{
    #####:  964:	  drawCard(currentPlayer, state);
        -:  965:	}
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
    #####:  969:      return 0;
        -:  970:		
        -:  971:    case village:
        -:  972:      //+1 Card
        1:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        1:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        1:  979:      discardCard(handPos, currentPlayer, state, 0);
        1:  980:      return 0;
        -:  981:		
        -:  982:    case baron:
    #####:  983:	  return baronFunc(state, currentPlayer, choice1);
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card
    #####:  987:      drawCard(currentPlayer, state);
        -:  988:			
        -:  989:      //+1 Actions
    #####:  990:      state->numActions++;
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case minion:
    #####:  997:		return minionFunc(state, currentPlayer, handPos, choice1, choice2);
        -:  998:		
        -:  999:    case steward:
        3: 1000:      if (choice1 == 1)
        -: 1001:	{
        -: 1002:	  //+2 cards
        1: 1003:	  drawCard(currentPlayer, state);
        1: 1004:	  drawCard(currentPlayer, state);
        -: 1005:	}
        2: 1006:      else if (choice1 == 2)
        -: 1007:	{
        -: 1008:	  //+2 coins
        1: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
        1: 1014:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1015:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1016:	}
        -: 1017:			
        -: 1018:      //discard card from hand
        3: 1019:      discardCard(handPos, currentPlayer, state, 0);
        3: 1020:      return 0;
        -: 1021:		
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
        -: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
        -: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
    #####: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
        -: 1038:      }
        -: 1039:	    
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
        -: 1047:	  }
        -: 1048:			    
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1050:	} 
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }    
        -: 1058:		       
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
        -: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1067:	  state->coins += 2;
        -: 1068:	}
        -: 1069:		    
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1071:	  drawCard(currentPlayer, state);
    #####: 1072:	  drawCard(currentPlayer, state);
        -: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case ambassador:
    #####: 1082:	  return ambassadorFunc(state, currentPlayer, choice1, choice2, handPos);
        -: 1083:		
        -: 1084:    case cutpurse:
        -: 1085:
    #####: 1086:      updateCoins(currentPlayer, state, 2);
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
        -: 1090:	    {
    #####: 1091:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1092:		{
    #####: 1093:		  if (state->hand[i][j] == copper)
        -: 1094:		    {
    #####: 1095:		      discardCard(j, i, state, 0);
    #####: 1096:		      break;
        -: 1097:		    }
    #####: 1098:		  if (j == state->handCount[i])
        -: 1099:		    {
    #####: 1100:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1101:			{
    #####: 1102:			  if (DEBUG)
        -: 1103:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1104:			}	
    #####: 1105:		      break;
        -: 1106:		    }		
        -: 1107:		}
        -: 1108:					
        -: 1109:	    }
        -: 1110:				
        -: 1111:	}				
        -: 1112:
        -: 1113:      //discard played card from hand
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1115:
    #####: 1116:      return 0;
        -: 1117:
        -: 1118:		
        -: 1119:    case embargo: 
        -: 1120:      //+2 Coins
    #####: 1121:      state->coins = state->coins + 2;
        -: 1122:			
        -: 1123:      //see if selected pile is in play
    #####: 1124:      if ( state->supplyCount[choice1] == -1 )
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:			
        -: 1129:      //add embargo token to selected supply pile
    #####: 1130:      state->embargoTokens[choice1]++;
        -: 1131:			
        -: 1132:      //trash card
    #####: 1133:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case outpost:
        -: 1137:      //set outpost flag
    #####: 1138:      state->outpostPlayed++;
        -: 1139:			
        -: 1140:      //discard card
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1142:      return 0;
        -: 1143:		
        -: 1144:    case salvager:
        -: 1145:      //+1 buy
    #####: 1146:      state->numBuys++;
        -: 1147:			
    #####: 1148:      if (choice1)
        -: 1149:	{
        -: 1150:	  //gain coins equal to trashed card
    #####: 1151:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1152:	  //trash card
    #####: 1153:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1154:	}
        -: 1155:			
        -: 1156:      //discard card
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1158:      return 0;
        -: 1159:		
        -: 1160:    case sea_hag:
    #####: 1161:      for (i = 0; i < state->numPlayers; i++){
    #####: 1162:	if (i != currentPlayer){
    #####: 1163:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1164:	  state->discardCount[i]++;
    #####: 1165:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1166:	}
        -: 1167:      }
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case treasure_map:
        -: 1171:      //search hand for another treasure_map
    #####: 1172:      index = -1;
    #####: 1173:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1174:	{
    #####: 1175:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1176:	    {
    #####: 1177:	      index = i;
    #####: 1178:	      break;
        -: 1179:	    }
        -: 1180:	}
    #####: 1181:      if (index > -1)
        -: 1182:	{
        -: 1183:	  //trash both treasure cards
    #####: 1184:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1185:	  discardCard(index, currentPlayer, state, 1);
        -: 1186:
        -: 1187:	  //gain 4 Gold cards
    #####: 1188:	  for (i = 0; i < 4; i++)
        -: 1189:	    {
    #####: 1190:	      gainCard(gold, state, 1, currentPlayer);
        -: 1191:	    }
        -: 1192:				
        -: 1193:	  //return success
    #####: 1194:	  return 1;
        -: 1195:	}
        -: 1196:			
        -: 1197:      //no second treasure_map found in hand
    #####: 1198:      return -1;
        -: 1199:    }
        -: 1200:	
    #####: 1201:  return -1;
        -: 1202:}
        -: 1203:
        7: 1204:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1205:{
        -: 1206:	
        -: 1207:  //if card is not trashed, added to Played pile 
        7: 1208:  if (trashFlag < 1)
        -: 1209:    {
        -: 1210:      //add card to played pile
        4: 1211:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1212:      state->playedCardCount++;
        -: 1213:    }
        -: 1214:	
        -: 1215:  //set played card to -1
        7: 1216:  state->hand[currentPlayer][handPos] = -1;
        -: 1217:	
        -: 1218:  //remove card from player's hand
        7: 1219:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1220:    {
        -: 1221:      //reduce number of cards in hand
    #####: 1222:      state->handCount[currentPlayer]--;
        -: 1223:    }
        7: 1224:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1225:    {
        -: 1226:      //reduce number of cards in hand
    #####: 1227:      state->handCount[currentPlayer]--;
        -: 1228:    }
        -: 1229:  else 	
        -: 1230:    {
        -: 1231:      //replace discarded card with last card in hand
        7: 1232:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1233:      //set last card to -1
        7: 1234:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1235:      //reduce number of cards in hand
        7: 1236:      state->handCount[currentPlayer]--;
        -: 1237:    }
        -: 1238:	
        7: 1239:  return 0;
        -: 1240:}
        -: 1241:
        1: 1242:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1243:{
        -: 1244:  //Note: supplyPos is enum of choosen card
        -: 1245:	
        -: 1246:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1247:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1248:    {
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
        -: 1252:  //added card for [whoseTurn] current player:
        -: 1253:  // toFlag = 0 : add to discard
        -: 1254:  // toFlag = 1 : add to deck
        -: 1255:  // toFlag = 2 : add to hand
        -: 1256:
        1: 1257:  if (toFlag == 1)
        -: 1258:    {
    #####: 1259:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1260:      state->deckCount[player]++;
        -: 1261:    }
        1: 1262:  else if (toFlag == 2)
        -: 1263:    {
    #####: 1264:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1265:      state->handCount[player]++;
        -: 1266:    }
        -: 1267:  else
        -: 1268:    {
        1: 1269:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1270:      state->discardCount[player]++;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //decrease number in supply pile
        1: 1274:  state->supplyCount[supplyPos]--;
        -: 1275:	 
        1: 1276:  return 0;
        -: 1277:}
        -: 1278:
       11: 1279:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1280:{
        -: 1281:  int i;
        -: 1282:	
        -: 1283:  //reset coin count
       11: 1284:  state->coins = 0;
        -: 1285:
        -: 1286:  //add coins for each Treasure card in player's hand
       66: 1287:  for (i = 0; i < state->handCount[player]; i++)
        -: 1288:    {
       55: 1289:      if (state->hand[player][i] == copper)
        -: 1290:	{
       36: 1291:	  state->coins += 1;
        -: 1292:	}
       19: 1293:      else if (state->hand[player][i] == silver)
        -: 1294:	{
    #####: 1295:	  state->coins += 2;
        -: 1296:	}
       19: 1297:      else if (state->hand[player][i] == gold)
        -: 1298:	{
    #####: 1299:	  state->coins += 3;
        -: 1300:	}	
        -: 1301:    }	
        -: 1302:
        -: 1303:  //add bonus
       11: 1304:  state->coins += bonus;
        -: 1305:
       11: 1306:  return 0;
        -: 1307:}
        -: 1308:
        -: 1309:
        -: 1310://end of dominion.c
        -: 1311:
